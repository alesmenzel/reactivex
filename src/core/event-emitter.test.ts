import EventEmitter from './event-emitter'

describe('EventEmitter', () => {
	it('calls given listener callback', () => {
		const emiter = new EventEmitter()
		const listener = jest.fn()
		emiter.on('event', listener)
		emiter.emit('event', { payload: 'something' })
		expect(listener).toBeCalledTimes(1)
		expect(listener).toBeCalledWith({ payload: 'something' })
	})

	it('calls given listener callback multiple times', () => {
		const emiter = new EventEmitter()
		const listener = jest.fn()
		emiter.on('event', listener)
		emiter.emit('event', { payload: 'something1' })
		emiter.emit('event', { payload: 'something2' })
		emiter.emit('event', { payload: 'something3' })
		expect(listener).toBeCalledTimes(3)
		expect(listener).nthCalledWith(1, { payload: 'something1' })
		expect(listener).nthCalledWith(2, { payload: 'something2' })
		expect(listener).nthCalledWith(3, { payload: 'something3' })
	})

	it('stops listening on event after calling .off', () => {
		const emiter = new EventEmitter()
		const listener = jest.fn()
		emiter.on('event', listener)
		emiter.emit('event', { payload: 'something1' })
		emiter.off('event', listener)
		emiter.emit('event', { payload: 'something2' })
		emiter.emit('event', { payload: 'something3' })
		expect(listener).toBeCalledTimes(1)
		expect(listener).toBeCalledWith({ payload: 'something1' })
	})

	it('stops listening on event after calling unsubscribe', () => {
		const emiter = new EventEmitter()
		const listener = jest.fn()
		const unsubscribe = emiter.on('event', listener)
		emiter.emit('event', { payload: 'something1' })
		unsubscribe()
		emiter.emit('event', { payload: 'something2' })
		emiter.emit('event', { payload: 'something3' })
		expect(listener).toBeCalledTimes(1)
		expect(listener).toBeCalledWith({ payload: 'something1' })
	})

	it('listens on multiple events', () => {
		const emiter = new EventEmitter()
		const listener1 = jest.fn()
		const listener2 = jest.fn()
		emiter.on('event1', listener1)
		emiter.on('event2', listener2)
		emiter.emit('event1', { payload: 'something1' })
		emiter.emit('event1', { payload: 'something2' })
		emiter.emit('event2', { payload: 'something3' })
		expect(listener1).toBeCalledTimes(2)
		expect(listener1).nthCalledWith(1, { payload: 'something1' })
		expect(listener1).nthCalledWith(2, { payload: 'something2' })
		expect(listener2).toBeCalledTimes(1)
		expect(listener2).toBeCalledWith({ payload: 'something3' })
	})

	it('keeps listening on events after a listener of the same type is removed', () => {
		const emiter = new EventEmitter()
		const listener1 = jest.fn()
		const listener2 = jest.fn()
		const unsubscribe = emiter.on('event', listener1)
		emiter.on('event', listener2)
		emiter.emit('event', { payload: 'something1' })
		emiter.emit('event', { payload: 'something2' })
		unsubscribe()
		emiter.emit('event', { payload: 'something3' })
		expect(listener1).toBeCalledTimes(2)
		expect(listener1).nthCalledWith(1, { payload: 'something1' })
		expect(listener1).nthCalledWith(2, { payload: 'something2' })
		expect(listener2).toBeCalledTimes(3)
		expect(listener2).nthCalledWith(1, { payload: 'something1' })
		expect(listener2).nthCalledWith(2, { payload: 'something2' })
		expect(listener2).nthCalledWith(3, { payload: 'something3' })
	})
})
